# .github/workflows/aws-deploy.yml

name: Deploy MERN App to AWS ECS

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches:
      - main

# Environment variables available to all jobs
env:
  AWS_REGION: us-east-1 # Change this to your AWS region from terraform/variables.tf
  ECR_REPOSITORY_SERVER: mern-app/server # Change this to match your ECR repo name
  ECR_REPOSITORY_WEBAPP: mern-app/webapp # Change this to match your ECR repo name
  ECS_CLUSTER: mern-app-cluster # Change this to your ECS cluster name from terraform/ecs.tf
  ECS_SERVICE_SERVER: mern-app-server-service # Change this to your server's ECS service name
  ECS_SERVICE_WEBAPP: mern-app-webapp-service # Change this to your webapp's ECS service name
  CONTAINER_NAME_SERVER: server # Container name from terraform/ecs.tf
  CONTAINER_NAME_WEBAPP: webapp # Container name from terraform/ecs.tf

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        # Uses the official AWS action to configure credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        # Logs in the Docker client to your ECR registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push SERVER image to Amazon ECR
        # This step builds the server Docker image and pushes it to ECR
        id: build-image-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.server -t $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push WEBAPP image to Amazon ECR
        # This step builds the webapp Docker image and pushes it to ECR
        id: build-image-webapp
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.webapp -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download existing SERVER task definition
        # Downloads the current task definition file from ECS
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_SERVER }} --query taskDefinition > task-definition-server.json

      - name: Fill in the new SERVER image ID in the Amazon ECS task definition
        # Updates the task definition with the new image URI from the build step
        id: task-def-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-server.json
          container-name: ${{ env.CONTAINER_NAME_SERVER }}
          image: ${{ steps.build-image-server.outputs.image }}

      - name: Deploy SERVER Amazon ECS task definition
        # Deploys the new task definition, which triggers a rolling update of the service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-server.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_SERVER }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Download existing WEBAPP task definition
        # Repeats the process for the webapp
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_WEBAPP }} --query taskDefinition > task-definition-webapp.json

      - name: Fill in the new WEBAPP image ID in the Amazon ECS task definition
        id: task-def-webapp
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-webapp.json
          container-name: ${{ env.CONTAINER_NAME_WEBAPP }}
          image: ${{ steps.build-image-webapp.outputs.image }}

      - name: Deploy WEBAPP Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-webapp.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_WEBAPP }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true